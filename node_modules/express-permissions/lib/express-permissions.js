(function() {
  var ExpressPermissions, Layer, path, sodb;

  path = require('path');

  Layer = require(path.join(require.resolve('express'), '..', 'lib', 'router', 'layer'));

  sodb = require('sodb');

  ExpressPermissions = {
    middleware: function() {
      return function(request, response, next) {
        var check, checkArray, checkObject;
        checkArray = ExpressPermissions.check(request, response);
        check = checkArray[0];
        checkObject = checkArray[1];
        switch (typeof check) {
          case 'object':
            return check.then(function(value) {
              return ExpressPermissions.produceError(value, request, response, checkObject, next);
            });
          default:
            return ExpressPermissions.produceError(check, request, response, checkObject, next);
        }
      };
    },
    produceError: function(value, request, response, checkObject, next) {
      if (value) {
        return next();
      } else {
        response.status(403);
        if (checkObject.denied) {
          return checkObject.denied.call(request.app, request, response);
        } else {
          if (request.app.permissionDenied) {
            return request.app.permissionDenied.call(request.app, request, response);
          } else {
            return response.end();
          }
        }
      }
    },
    add: function(app, route, value, options) {
      if (options == null) {
        options = {};
      }
      options.promise || (options.promise = false);
      app.permissions || (app.permissions = new sodb({
        cache: true
      }));
      return app.permissions.add({
        "typeof": typeof value,
        route: route,
        value: value,
        promise: options.promise,
        denied: options.denied
      });
    },
    check: function(request, response) {
      var check, foundRoute, promise;
      foundRoute = this.getRoute(request.app, request.originalUrl);
      request.params = foundRoute.params;
      check = request.app.permissions.findOne({
        route: foundRoute.route
      });
      switch (check["typeof"]) {
        case 'boolean':
          return [check.value, check];
        case 'object':
          return [this.checkObject(check.value, response.locals), check];
        case 'function':
          if (check.promise) {
            promise = new Promise(function(resolve, reject) {
              return check.value.call(request.app, request, response, resolve, reject);
            });
            return [promise, check];
          } else {
            return [check.value.call(request.app, request, response), check];
          }
      }
    },
    getRoute: function(app, url) {
      var i, layer, len, object, route, routes;
      routes = app.permissions.where().map(function(value) {
        return value.route;
      });
      for (i = 0, len = routes.length; i < len; i++) {
        route = routes[i];
        layer = new Layer(route, {}, function() {});
        if (layer.match(url)) {
          object = {
            route: route,
            params: layer.params
          };
          return object;
        }
      }
      switch (typeof app.permissions.where({
            route: url
          })[0]) {
        case 'undefined':
          return this.getRoute(app, path.join(url, '..').replace(/\\/g, '/'));
      }
    },
    checkObject: function(object, locals) {
      var i, key, len, ref;
      ref = Object.keys(object);
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        switch (typeof object[key]) {
          case 'object':
            if (typeof locals[key] === 'undefined') {
              return false;
            }
            return this.checkObject(object[key], locals[key]);
          default:
            return object[key] === locals[key];
        }
      }
    }
  };

  module.exports = ExpressPermissions;

}).call(this);
