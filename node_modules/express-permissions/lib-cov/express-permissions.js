/* ****** automatically generated by jscover - do not edit ******/
if (typeof _$jscoverage === 'undefined') { _$jscoverage = {}; }
/* ****** end - do not edit ******/
function BranchData() {
    this.position = -1;
    this.nodeLength = -1;
    this.src = null;
    this.evalFalse = 0;
    this.evalTrue = 0;

    this.init = function(position, nodeLength, src) {
        this.position = position;
        this.nodeLength = nodeLength;
        this.src = src;
        return this;
    }

    this.ranCondition = function(result) {
        if (result)
            this.evalTrue++;
        else
            this.evalFalse++;
    };

    this.pathsCovered = function() {
        var paths = 0;
        if (this.evalTrue > 0)
          paths++;
        if (this.evalFalse > 0)
          paths++;
        return paths;
    };

    this.covered = function() {
        return this.evalTrue > 0 && this.evalFalse > 0;
    };

    this.toJSON = function() {
        return '{"position":' + this.position
            + ',"nodeLength":' + this.nodeLength
            + ',"src":' + jscoverage_quote(this.src)
            + ',"evalFalse":' + this.evalFalse
            + ',"evalTrue":' + this.evalTrue + '}';
    };

    this.message = function() {
        if (this.evalTrue === 0 && this.evalFalse === 0)
            return 'Condition never evaluated         :\t' + this.src;
        else if (this.evalTrue === 0)
            return 'Condition never evaluated to true :\t' + this.src;
        else if (this.evalFalse === 0)
            return 'Condition never evaluated to false:\t' + this.src;
        else
            return 'Condition covered';
    };
}

BranchData.fromJson = function(jsonString) {
    var json = eval('(' + jsonString + ')');
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

BranchData.fromJsonObject = function(json) {
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

function buildBranchMessage(conditions) {
    var message = 'The following was not covered:';
    for (var i = 0; i < conditions.length; i++) {
        if (conditions[i] !== undefined && conditions[i] !== null && !conditions[i].covered())
          message += '\n- '+ conditions[i].message();
    }
    return message;
};

function convertBranchDataConditionArrayToJSON(branchDataConditionArray) {
    var array = [];
    var length = branchDataConditionArray.length;
    for (var condition = 0; condition < length; condition++) {
        var branchDataObject = branchDataConditionArray[condition];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = branchDataObject.toJSON();
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesToJSON(branchData) {
    if (branchData === undefined) {
        return '[]'
    }
    var array = [];
    var length = branchData.length;
    for (var line = 0; line < length; line++) {
        var branchDataObject = branchData[line];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = convertBranchDataConditionArrayToJSON(branchDataObject);
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesFromJSON(jsonObject) {
    if (jsonObject === undefined) {
        return [];
    }
    var length = jsonObject.length;
    for (var line = 0; line < length; line++) {
        var branchDataJSON = jsonObject[line];
        if (branchDataJSON !== null) {
            for (var conditionIndex = 0; conditionIndex < branchDataJSON.length; conditionIndex ++) {
                var condition = branchDataJSON[conditionIndex];
                if (condition !== null) {
                    branchDataJSON[conditionIndex] = BranchData.fromJsonObject(condition);
                }
            }
        }
    }
    return jsonObject;
}
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
      top.opener._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
      top._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
  this._$jscoverage.branchData = {};
}
if (! _$jscoverage['express-permissions.js']) {
  _$jscoverage['express-permissions.js'] = [];
  _$jscoverage['express-permissions.js'][1] = 0;
  _$jscoverage['express-permissions.js'][2] = 0;
  _$jscoverage['express-permissions.js'][4] = 0;
  _$jscoverage['express-permissions.js'][6] = 0;
  _$jscoverage['express-permissions.js'][8] = 0;
  _$jscoverage['express-permissions.js'][10] = 0;
  _$jscoverage['express-permissions.js'][12] = 0;
  _$jscoverage['express-permissions.js'][13] = 0;
  _$jscoverage['express-permissions.js'][14] = 0;
  _$jscoverage['express-permissions.js'][15] = 0;
  _$jscoverage['express-permissions.js'][17] = 0;
  _$jscoverage['express-permissions.js'][18] = 0;
  _$jscoverage['express-permissions.js'][21] = 0;
  _$jscoverage['express-permissions.js'][26] = 0;
  _$jscoverage['express-permissions.js'][27] = 0;
  _$jscoverage['express-permissions.js'][29] = 0;
  _$jscoverage['express-permissions.js'][30] = 0;
  _$jscoverage['express-permissions.js'][31] = 0;
  _$jscoverage['express-permissions.js'][33] = 0;
  _$jscoverage['express-permissions.js'][38] = 0;
  _$jscoverage['express-permissions.js'][39] = 0;
  _$jscoverage['express-permissions.js'][41] = 0;
  _$jscoverage['express-permissions.js'][42] = 0;
  _$jscoverage['express-permissions.js'][43] = 0;
  _$jscoverage['express-permissions.js'][51] = 0;
  _$jscoverage['express-permissions.js'][52] = 0;
  _$jscoverage['express-permissions.js'][53] = 0;
  _$jscoverage['express-permissions.js'][54] = 0;
  _$jscoverage['express-permissions.js'][57] = 0;
  _$jscoverage['express-permissions.js'][59] = 0;
  _$jscoverage['express-permissions.js'][61] = 0;
  _$jscoverage['express-permissions.js'][63] = 0;
  _$jscoverage['express-permissions.js'][64] = 0;
  _$jscoverage['express-permissions.js'][65] = 0;
  _$jscoverage['express-permissions.js'][68] = 0;
  _$jscoverage['express-permissions.js'][73] = 0;
  _$jscoverage['express-permissions.js'][74] = 0;
  _$jscoverage['express-permissions.js'][75] = 0;
  _$jscoverage['express-permissions.js'][77] = 0;
  _$jscoverage['express-permissions.js'][78] = 0;
  _$jscoverage['express-permissions.js'][79] = 0;
  _$jscoverage['express-permissions.js'][80] = 0;
  _$jscoverage['express-permissions.js'][81] = 0;
  _$jscoverage['express-permissions.js'][85] = 0;
  _$jscoverage['express-permissions.js'][88] = 0;
  _$jscoverage['express-permissions.js'][92] = 0;
  _$jscoverage['express-permissions.js'][96] = 0;
  _$jscoverage['express-permissions.js'][97] = 0;
  _$jscoverage['express-permissions.js'][98] = 0;
  _$jscoverage['express-permissions.js'][99] = 0;
  _$jscoverage['express-permissions.js'][100] = 0;
  _$jscoverage['express-permissions.js'][102] = 0;
  _$jscoverage['express-permissions.js'][103] = 0;
  _$jscoverage['express-permissions.js'][105] = 0;
  _$jscoverage['express-permissions.js'][107] = 0;
  _$jscoverage['express-permissions.js'][113] = 0;
}
_$jscoverage['express-permissions.js'].source = ["(function() {","  var ExpressPermissions, Layer, path, sodb;","","  path = require('path');","","  Layer = require(path.join(require.resolve('express'), '..', 'lib', 'router', 'layer'));","","  sodb = require('sodb');","","  ExpressPermissions = {","    middleware: function() {","      return function(request, response, next) {","        var check;","        check = ExpressPermissions.check(request, response);","        switch (typeof check) {","          case 'object':","            return check.then(function(value) {","              return ExpressPermissions.produceError(value, request, response, next);","            });","          default:","            return ExpressPermissions.produceError(check, request, response, next);","        }","      };","    },","    produceError: function(value, request, response, next) {","      if (value) {","        return next();","      } else {","        response.status(403);","        if (request.app.permissionDenied) {","          return request.app.permissionDenied.call(request.app, request, response);","        } else {","          return response.end();","        }","      }","    },","    add: function(app, route, value, options) {","      if (options == null) {","        options = {};","      }","      options.promise || (options.promise = false);","      app.permissions || (app.permissions = new sodb());","      return app.permissions.add({","        \"typeof\": typeof value,","        route: route,","        value: value,","        promise: options.promise","      });","    },","    check: function(request, response) {","      var check, foundRoute;","      foundRoute = this.getRoute(request.app, request.originalUrl);","      request.params = foundRoute.params;","      check = request.app.permissions.where({","        route: foundRoute.route","      })[0];","      switch (check[\"typeof\"]) {","        case 'boolean':","          return check.value;","        case 'object':","          return this.checkObject(check.value, response.locals);","        case 'function':","          if (check.promise) {","            return new Promise(function(resolve, reject) {","              return check.value.call(request.app, request, response, resolve, reject);","            });","          } else {","            return check.value.call(request.app, request, response);","          }","      }","    },","    getRoute: function(app, url) {","      var i, layer, len, object, route, routes;","      routes = app.permissions.where().map(function(value) {","        return value.route;","      });","      for (i = 0, len = routes.length; i &lt; len; i++) {","        route = routes[i];","        layer = new Layer(route, {}, function() {});","        if (layer.match(url)) {","          object = {","            route: route,","            params: layer.params","          };","          return object;","        }","      }","      switch (typeof app.permissions.where({","            route: url","          })[0]) {","        case 'undefined':","          return this.getRoute(app, path.join(url, '..').replace(/\\\\/g, '/'));","      }","    },","    checkObject: function(object, locals) {","      var i, key, len, ref;","      ref = Object.keys(object);","      for (i = 0, len = ref.length; i &lt; len; i++) {","        key = ref[i];","        switch (typeof object[key]) {","          case 'object':","            if (typeof locals[key] === 'undefined') {","              return false;","            }","            return this.checkObject(object[key], locals[key]);","          default:","            return object[key] === locals[key];","        }","      }","    }","  };","","  module.exports = ExpressPermissions;","","}).call(this);"];
_$jscoverage['express-permissions.js'][1]++;
(function() {
  _$jscoverage['express-permissions.js'][2]++;
  var ExpressPermissions, Layer, path, sodb;
  _$jscoverage['express-permissions.js'][4]++;
  path = require('path');
  _$jscoverage['express-permissions.js'][6]++;
  Layer = require(path.join(require.resolve('express'), '..', 'lib', 'router', 'layer'));
  _$jscoverage['express-permissions.js'][8]++;
  sodb = require('sodb');
  _$jscoverage['express-permissions.js'][10]++;
  ExpressPermissions = {
  middleware: function() {
  _$jscoverage['express-permissions.js'][12]++;
  return function(request, response, next) {
  _$jscoverage['express-permissions.js'][13]++;
  var check;
  _$jscoverage['express-permissions.js'][14]++;
  check = ExpressPermissions.check(request, response);
  _$jscoverage['express-permissions.js'][15]++;
  switch (typeof check) {
    case 'object':
      _$jscoverage['express-permissions.js'][17]++;
      return check.then(function(value) {
  _$jscoverage['express-permissions.js'][18]++;
  return ExpressPermissions.produceError(value, request, response, next);
});
    default:
      _$jscoverage['express-permissions.js'][21]++;
      return ExpressPermissions.produceError(check, request, response, next);
  }
};
}, 
  produceError: function(value, request, response, next) {
  _$jscoverage['express-permissions.js'][26]++;
  if (value) {
    _$jscoverage['express-permissions.js'][27]++;
    return next();
  } else {
    _$jscoverage['express-permissions.js'][29]++;
    response.status(403);
    _$jscoverage['express-permissions.js'][30]++;
    if (request.app.permissionDenied) {
      _$jscoverage['express-permissions.js'][31]++;
      return request.app.permissionDenied.call(request.app, request, response);
    } else {
      _$jscoverage['express-permissions.js'][33]++;
      return response.end();
    }
  }
}, 
  add: function(app, route, value, options) {
  _$jscoverage['express-permissions.js'][38]++;
  if (options == null) {
    _$jscoverage['express-permissions.js'][39]++;
    options = {};
  }
  _$jscoverage['express-permissions.js'][41]++;
  options.promise || (options.promise = false);
  _$jscoverage['express-permissions.js'][42]++;
  app.permissions || (app.permissions = new sodb());
  _$jscoverage['express-permissions.js'][43]++;
  return app.permissions.add({
  "typeof": typeof value, 
  route: route, 
  value: value, 
  promise: options.promise});
}, 
  check: function(request, response) {
  _$jscoverage['express-permissions.js'][51]++;
  var check, foundRoute;
  _$jscoverage['express-permissions.js'][52]++;
  foundRoute = this.getRoute(request.app, request.originalUrl);
  _$jscoverage['express-permissions.js'][53]++;
  request.params = foundRoute.params;
  _$jscoverage['express-permissions.js'][54]++;
  check = request.app.permissions.where({
  route: foundRoute.route})[0];
  _$jscoverage['express-permissions.js'][57]++;
  switch (check["typeof"]) {
    case 'boolean':
      _$jscoverage['express-permissions.js'][59]++;
      return check.value;
    case 'object':
      _$jscoverage['express-permissions.js'][61]++;
      return this.checkObject(check.value, response.locals);
    case 'function':
      _$jscoverage['express-permissions.js'][63]++;
      if (check.promise) {
        _$jscoverage['express-permissions.js'][64]++;
        return new Promise(function(resolve, reject) {
  _$jscoverage['express-permissions.js'][65]++;
  return check.value.call(request.app, request, response, resolve, reject);
});
      } else {
        _$jscoverage['express-permissions.js'][68]++;
        return check.value.call(request.app, request, response);
      }
  }
}, 
  getRoute: function(app, url) {
  _$jscoverage['express-permissions.js'][73]++;
  var i, layer, len, object, route, routes;
  _$jscoverage['express-permissions.js'][74]++;
  routes = app.permissions.where().map(function(value) {
  _$jscoverage['express-permissions.js'][75]++;
  return value.route;
});
  _$jscoverage['express-permissions.js'][77]++;
  for (i = 0 , len = routes.length; i < len; i++) {
    _$jscoverage['express-permissions.js'][78]++;
    route = routes[i];
    _$jscoverage['express-permissions.js'][79]++;
    layer = new Layer(route, {}, function() {
});
    _$jscoverage['express-permissions.js'][80]++;
    if (layer.match(url)) {
      _$jscoverage['express-permissions.js'][81]++;
      object = {
  route: route, 
  params: layer.params};
      _$jscoverage['express-permissions.js'][85]++;
      return object;
    }
  }
  _$jscoverage['express-permissions.js'][88]++;
  switch (typeof app.permissions.where({
  route: url})[0]) {
    case 'undefined':
      _$jscoverage['express-permissions.js'][92]++;
      return this.getRoute(app, path.join(url, '..').replace(/\\/g, '/'));
  }
}, 
  checkObject: function(object, locals) {
  _$jscoverage['express-permissions.js'][96]++;
  var i, key, len, ref;
  _$jscoverage['express-permissions.js'][97]++;
  ref = Object.keys(object);
  _$jscoverage['express-permissions.js'][98]++;
  for (i = 0 , len = ref.length; i < len; i++) {
    _$jscoverage['express-permissions.js'][99]++;
    key = ref[i];
    _$jscoverage['express-permissions.js'][100]++;
    switch (typeof object[key]) {
      case 'object':
        _$jscoverage['express-permissions.js'][102]++;
        if (typeof locals[key] === 'undefined') {
          _$jscoverage['express-permissions.js'][103]++;
          return false;
        }
        _$jscoverage['express-permissions.js'][105]++;
        return this.checkObject(object[key], locals[key]);
      default:
        _$jscoverage['express-permissions.js'][107]++;
        return object[key] === locals[key];
    }
  }
}};
  _$jscoverage['express-permissions.js'][113]++;
  module.exports = ExpressPermissions;
}).call(this);
